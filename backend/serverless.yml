# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: fileshare-backend
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

plugins:
- serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs16.x
  region: us-east-2
  tracing:
    apiGateway: true
    lambda: true
  environment:
    BUCKET_NAME: !Ref FileBucket
    BASE_URL: https://${self:custom.domainName}
    POWERTOOLS_SERVICE_NAME: linktransfer
    POWERTOOLS_METRICS_NAMESPACE: linktransfer

custom:
  domainName: linktransfer.click

# https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api.html
functions:
  createShare:
    handler: share-handler.handleEvent
    events:
      - httpApi:
          method: POST
          path: '/'
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource:
          - !Sub "arn:aws:s3:::${FileBucket}/shares/*"
      - Effect: Allow
        Action:
          - s3:ListBucket
        Resource:
          - !Sub "arn:aws:s3:::${FileBucket}"
  downloadShare:
    handler: download-handler.handleEvent
    events:
      - httpApi:
          method: GET
          path: '/{id}'
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource:
          - !Sub "arn:aws:s3:::${FileBucket}/shares/*"

resources:
 Resources:
  #mapping custom domain and GatewayApi
  CustomDomainPathMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      ApiId: !Ref HttpApi
      ApiMappingKey: "share"
      DomainName: ${self:custom.domainName}
      Stage: !Ref HttpApiStage

  FileBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: ${file(./bucket-name.cjs):bucketName}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
  